// <auto-generated />
using System;
using EspoNew.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EspoNew.Server.Migrations
{
    [DbContext(typeof(EspoDbNewContext))]
    [Migration("20241016155053_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AccountsAccount", b =>
                {
                    b.Property<string>("account_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("billing_address_city")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("billing_address_country")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("billing_address_postal_code")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("billing_address_state")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("billing_address_street")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("campaign_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("industry")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("shipping_address_city")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("shipping_address_country")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("shipping_address_postal_code")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("shipping_address_state")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("shipping_address_street")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("sic_code")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("website")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("account_id");

                    b.HasIndex("assigned_employee_id");

                    b.HasIndex("campaign_id");

                    b.ToTable("account", "Accounts", t =>
                        {
                            t.HasTrigger("account_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AccountsAccountContact", b =>
                {
                    b.Property<string>("account_contact_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("is_inactive")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("role")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("account_contact_id");

                    b.HasIndex("account_id");

                    b.HasIndex("contact_id");

                    b.ToTable("account_contact", "Accounts", t =>
                        {
                            t.HasTrigger("account_contact_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AccountsAccountDocument", b =>
                {
                    b.Property<string>("account_document_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("document_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("account_document_id");

                    b.HasIndex("account_id");

                    b.HasIndex("document_id");

                    b.ToTable("account_document", "Accounts", t =>
                        {
                            t.HasTrigger("account_document_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressCity", b =>
                {
                    b.Property<string>("city_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("city_name")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state_id")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("city_id");

                    b.HasIndex("state_id");

                    b.ToTable("address_city", "Address", t =>
                        {
                            t.HasTrigger("address_city_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressCountry", b =>
                {
                    b.Property<string>("country_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("country_name")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("country_id");

                    b.ToTable("address_country", "Address", t =>
                        {
                            t.HasTrigger("address_country_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressState", b =>
                {
                    b.Property<string>("state_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("country_id")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("state_name")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("state_id");

                    b.HasIndex("country_id");

                    b.ToTable("address_state", "Address", t =>
                        {
                            t.HasTrigger("address_state_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CallsCall", b =>
                {
                    b.Property<string>("call_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_end")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_start")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direction")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Outbound')");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Planned')");

                    b.HasKey("call_id");

                    b.HasIndex("account_id");

                    b.ToTable("call", "Calls", t =>
                        {
                            t.HasTrigger("call_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CallsCallContact", b =>
                {
                    b.Property<string>("call_contact_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("call_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'None')");

                    b.HasKey("call_contact_id");

                    b.HasIndex("call_id");

                    b.HasIndex("contact_id");

                    b.ToTable("call_contact", "Calls", t =>
                        {
                            t.HasTrigger("call_contact_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CallsCallLead", b =>
                {
                    b.Property<string>("call_lead_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("call_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("lead_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'None')");

                    b.HasKey("call_lead_id");

                    b.HasIndex("call_id");

                    b.HasIndex("lead_id");

                    b.ToTable("call_lead", "Calls", t =>
                        {
                            t.HasTrigger("call_lead_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CampaignCampaign", b =>
                {
                    b.Property<string>("campaign_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("accounts_template_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<double?>("budget")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("budget_currency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contacts_template_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("end_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("leads_template_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short>("mail_merge_only_with_address")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("start_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Planning')");

                    b.Property<string>("type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Email')");

                    b.Property<string>("users_template_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("campaign_id");

                    b.ToTable("campaign", "Campaign", t =>
                        {
                            t.HasTrigger("campaign_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CasesCase", b =>
                {
                    b.Property<string>("case_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inbound_email_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("lead_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<long>("number")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("number"));

                    b.Property<string>("priority")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Normal')");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'New')");

                    b.Property<string>("type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("case_id");

                    b.HasIndex("account_id");

                    b.HasIndex("contact_id");

                    b.HasIndex("lead_id");

                    b.ToTable("case", "Cases", t =>
                        {
                            t.HasTrigger("case_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CasesCaseContact", b =>
                {
                    b.Property<string>("case_contact_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("case_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("case_contact_id");

                    b.HasIndex("case_id");

                    b.HasIndex("contact_id");

                    b.ToTable("case_contact", "Cases", t =>
                        {
                            t.HasTrigger("case_contact_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContact", b =>
                {
                    b.Property<string>("contact_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_city_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_country_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_postal_code")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_state_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_street")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("campaign_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("do_not_call")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("first_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("last_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("middle_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("salutation_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("contact_id");

                    b.HasIndex("account_id");

                    b.HasIndex("address_city_id");

                    b.HasIndex("address_country_id");

                    b.HasIndex("address_state_id");

                    b.HasIndex("campaign_id");

                    b.ToTable("contact", "Contacts", t =>
                        {
                            t.HasTrigger("contact_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContactDocument", b =>
                {
                    b.Property<string>("contact_document_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("document_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("contact_document_id");

                    b.HasIndex("contact_id");

                    b.HasIndex("document_id");

                    b.ToTable("contact_document", "Contacts", t =>
                        {
                            t.HasTrigger("contact_document_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContactMeeting", b =>
                {
                    b.Property<string>("contact_meeting_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("meeting_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'None')");

                    b.HasKey("contact_meeting_id");

                    b.HasIndex("contact_id");

                    b.HasIndex("meeting_id");

                    b.ToTable("contact_meeting", "Contacts", t =>
                        {
                            t.HasTrigger("contact_meeting_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContactOpportunity", b =>
                {
                    b.Property<string>("contact_opportunity_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("opportunity_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("role")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("contact_opportunity_id");

                    b.HasIndex("contact_id");

                    b.HasIndex("opportunity_id");

                    b.ToTable("contact_opportunity", "Contacts", t =>
                        {
                            t.HasTrigger("contact_opportunity_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.DocumentsDocument", b =>
                {
                    b.Property<string>("document_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("expiration_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("file_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("folder_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("publish_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Active')");

                    b.Property<string>("type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("document_id");

                    b.HasIndex("assigned_employee_id");

                    b.ToTable("document", "Documents", t =>
                        {
                            t.HasTrigger("document_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.DocumentsDocumentLead", b =>
                {
                    b.Property<string>("document_lead_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("document_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("lead_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("document_lead_id");

                    b.HasIndex("document_id");

                    b.HasIndex("lead_id");

                    b.ToTable("document_lead", "Documents", t =>
                        {
                            t.HasTrigger("document_lead_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.EmailEmail", b =>
                {
                    b.Property<string>("email_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_name_map")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("body")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("body_plain")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("created_event_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("created_event_type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_sent")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("delivery_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("from_email_address_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("from_string")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("group_folder_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short>("has_attachment")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ics_contents")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ics_event_uid")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short>("is_html")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("is_replied")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("is_system")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("message_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("message_id_internal")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("replied_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("reply_to_string")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("sent_by_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Archived')");

                    b.HasKey("email_id");

                    b.HasIndex("account_id");

                    b.ToTable("email", "Email", t =>
                        {
                            t.HasTrigger("email_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.EmailEmailAccount", b =>
                {
                    b.Property<string>("email_account_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("connected_at")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("email_address")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("email_folder_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("fetch_data")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("fetch_since")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("host")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("imap_handler")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short>("keep_fetched_emails_unread")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("monitored_folders")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("password")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("port")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((993))");

                    b.Property<string>("security")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'SSL')");

                    b.Property<string>("sent_folder")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short>("smtp_auth")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("smtp_auth_mechanism")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'login')");

                    b.Property<string>("smtp_handler")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("smtp_host")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("smtp_password")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("smtp_port")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((587))");

                    b.Property<string>("smtp_security")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'TLS')");

                    b.Property<string>("smtp_username")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Active')");

                    b.Property<short>("store_sent_emails")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("use_imap")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("use_smtp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("username")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("email_account_id");

                    b.ToTable("email_account", "Email", t =>
                        {
                            t.HasTrigger("email_account_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.EmployeesEmployee", b =>
                {
                    b.Property<string>("employee_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("api_key")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("auth_method")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("avatar_color")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("avatar_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("dashboard_template_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("default_team_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("delete_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'0')");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("employee_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("first_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("gender")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("is_active")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("last_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("layout_set_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("middle_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("password")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("salutation_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("title")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'regular')");

                    b.Property<string>("working_time_calendar_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("employee_id");

                    b.HasIndex("contact_id");

                    b.ToTable("employee", "Employees", t =>
                        {
                            t.HasTrigger("employee_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.LeadsLead", b =>
                {
                    b.Property<string>("lead_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_city")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_country")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_postal_code")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_state")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_street")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("campaign_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("converted_at")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("created_account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("created_contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("created_opportunity_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("do_not_call")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("first_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("industry")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("last_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("middle_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<double?>("opportunity_amount")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("opportunity_amount_currency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("salutation_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("source")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'New')");

                    b.Property<string>("title")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("website")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("lead_id");

                    b.HasIndex("campaign_id");

                    b.ToTable("lead", "Leads", t =>
                        {
                            t.HasTrigger("lead_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.MeetingsMeeting", b =>
                {
                    b.Property<string>("meeting_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_end")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_end_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_start")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_start_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("is_all_day")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Planned')");

                    b.HasKey("meeting_id");

                    b.HasIndex("account_id");

                    b.ToTable("meeting", "Meetings", t =>
                        {
                            t.HasTrigger("meeting_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.OpportunitiesOpportunity", b =>
                {
                    b.Property<string>("opportunity_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<double?>("amount")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("amount_currency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("campaign_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("close_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_stage")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("lead_source")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("probability")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("stage")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Prospecting')");

                    b.HasKey("opportunity_id");

                    b.HasIndex("account_id");

                    b.HasIndex("assigned_employee_id");

                    b.HasIndex("campaign_id");

                    b.HasIndex("contact_id");

                    b.ToTable("opportunity", "Opportunities", t =>
                        {
                            t.HasTrigger("opportunity_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.TargetTarget", b =>
                {
                    b.Property<string>("target_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_city")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_country")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_postal_code")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_state")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("address_street")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("do_not_call")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("first_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("last_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("middle_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("salutation_name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("title")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("website")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("target_id");

                    b.ToTable("target", "Target", t =>
                        {
                            t.HasTrigger("target_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.TargetTargetList", b =>
                {
                    b.Property<string>("target_list_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("assigned_user_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("target_list_id");

                    b.ToTable("target_list", "Target", t =>
                        {
                            t.HasTrigger("target_list_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.TasksTask", b =>
                {
                    b.Property<string>("task_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("account_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("assigned_employee_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("contact_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_completed")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_end")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_end_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_start")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("date_start_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("description")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("parent_type")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("priority")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Normal')");

                    b.Property<string>("status")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'Not Started')");

                    b.HasKey("task_id");

                    b.HasIndex("account_id");

                    b.HasIndex("assigned_employee_id");

                    b.HasIndex("contact_id");

                    b.HasIndex("email_id");

                    b.ToTable("task", "Tasks", t =>
                        {
                            t.HasTrigger("task_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.TeamsTeam", b =>
                {
                    b.Property<string>("team_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short?>("deleted")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("layout_set_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("name")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("position_list")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("working_time_calendar_id")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("team_id");

                    b.ToTable("team", "Teams", t =>
                        {
                            t.HasTrigger("team_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AccountsAccount", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.EmployeesEmployee", "employee")
                        .WithMany("Accountsaccounts")
                        .HasForeignKey("assigned_employee_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.CampaignCampaign", "campaign")
                        .WithMany("Accountsaccounts")
                        .HasForeignKey("campaign_id");

                    b.Navigation("campaign");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AccountsAccountContact", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Accountsaccount_contacts")
                        .HasForeignKey("account_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Accountsaccount_contacts")
                        .HasForeignKey("contact_id");

                    b.Navigation("account");

                    b.Navigation("contact");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AccountsAccountDocument", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Accountsaccount_documents")
                        .HasForeignKey("account_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.DocumentsDocument", "document")
                        .WithMany("Accountsaccount_documents")
                        .HasForeignKey("document_id");

                    b.Navigation("account");

                    b.Navigation("document");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressCity", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AddressAddressState", "address_state")
                        .WithMany("Addressaddress_cities")
                        .HasForeignKey("state_id");

                    b.Navigation("address_state");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressState", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AddressAddressCountry", "address_country")
                        .WithMany("Addressaddress_states")
                        .HasForeignKey("country_id");

                    b.Navigation("address_country");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CallsCall", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Callscalls")
                        .HasForeignKey("account_id");

                    b.Navigation("account");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CallsCallContact", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.CallsCall", "call")
                        .WithMany("Callscall_contacts")
                        .HasForeignKey("call_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Callscall_contacts")
                        .HasForeignKey("contact_id");

                    b.Navigation("call");

                    b.Navigation("contact");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CallsCallLead", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.CallsCall", "call")
                        .WithMany("Callscall_leads")
                        .HasForeignKey("call_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.LeadsLead", "lead")
                        .WithMany("Callscall_leads")
                        .HasForeignKey("lead_id");

                    b.Navigation("call");

                    b.Navigation("lead");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CasesCase", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Cases_cases")
                        .HasForeignKey("account_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Cases_cases")
                        .HasForeignKey("contact_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.LeadsLead", "lead")
                        .WithMany("Cases_cases")
                        .HasForeignKey("lead_id");

                    b.Navigation("account");

                    b.Navigation("contact");

                    b.Navigation("lead");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CasesCaseContact", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.CasesCase", "_case")
                        .WithMany("Casescase_contacts")
                        .HasForeignKey("case_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Casescase_contacts")
                        .HasForeignKey("contact_id");

                    b.Navigation("_case");

                    b.Navigation("contact");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContact", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Contactscontacts")
                        .HasForeignKey("account_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AddressAddressCity", "address_city")
                        .WithMany("Contactscontacts")
                        .HasForeignKey("address_city_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AddressAddressCountry", "address_country")
                        .WithMany("Contactscontacts")
                        .HasForeignKey("address_country_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AddressAddressState", "address_state")
                        .WithMany("Contactscontacts")
                        .HasForeignKey("address_state_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.CampaignCampaign", "campaign")
                        .WithMany("Contactscontacts")
                        .HasForeignKey("campaign_id");

                    b.Navigation("account");

                    b.Navigation("address_city");

                    b.Navigation("address_country");

                    b.Navigation("address_state");

                    b.Navigation("campaign");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContactDocument", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Contactscontact_documents")
                        .HasForeignKey("contact_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.DocumentsDocument", "document")
                        .WithMany("Contactscontact_documents")
                        .HasForeignKey("document_id");

                    b.Navigation("contact");

                    b.Navigation("document");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContactMeeting", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Contactscontact_meetings")
                        .HasForeignKey("contact_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.MeetingsMeeting", "meeting")
                        .WithMany("Contactscontact_meetings")
                        .HasForeignKey("meeting_id");

                    b.Navigation("contact");

                    b.Navigation("meeting");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContactOpportunity", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Contactscontact_opportunities")
                        .HasForeignKey("contact_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.OpportunitiesOpportunity", "opportunity")
                        .WithMany("Contactscontact_opportunities")
                        .HasForeignKey("opportunity_id");

                    b.Navigation("contact");

                    b.Navigation("opportunity");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.DocumentsDocument", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.EmployeesEmployee", "employee")
                        .WithMany("Documentsdocuments")
                        .HasForeignKey("assigned_employee_id");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.DocumentsDocumentLead", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.DocumentsDocument", "document")
                        .WithMany("Documentsdocument_leads")
                        .HasForeignKey("document_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.LeadsLead", "lead")
                        .WithMany("Documentsdocument_leads")
                        .HasForeignKey("lead_id");

                    b.Navigation("document");

                    b.Navigation("lead");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.EmailEmail", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Emailemails")
                        .HasForeignKey("account_id");

                    b.Navigation("account");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.EmployeesEmployee", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Employeesemployees")
                        .HasForeignKey("contact_id");

                    b.Navigation("contact");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.LeadsLead", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.CampaignCampaign", "campaign")
                        .WithMany("Leadsleads")
                        .HasForeignKey("campaign_id");

                    b.Navigation("campaign");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.MeetingsMeeting", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Meetingsmeetings")
                        .HasForeignKey("account_id");

                    b.Navigation("account");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.OpportunitiesOpportunity", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Opportunitiesopportunities")
                        .HasForeignKey("account_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.EmployeesEmployee", "employee")
                        .WithMany("Opportunitiesopportunities")
                        .HasForeignKey("assigned_employee_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.CampaignCampaign", "campaign")
                        .WithMany("Opportunitiesopportunities")
                        .HasForeignKey("campaign_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Opportunitiesopportunities")
                        .HasForeignKey("contact_id");

                    b.Navigation("account");

                    b.Navigation("campaign");

                    b.Navigation("contact");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.TasksTask", b =>
                {
                    b.HasOne("EspoNew.Server.Models.EspoDbNew.AccountsAccount", "account")
                        .WithMany("Taskstasks")
                        .HasForeignKey("account_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.EmployeesEmployee", "employee")
                        .WithMany("Taskstasks")
                        .HasForeignKey("assigned_employee_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.ContactsContact", "contact")
                        .WithMany("Taskstasks")
                        .HasForeignKey("contact_id");

                    b.HasOne("EspoNew.Server.Models.EspoDbNew.EmailEmail", "email")
                        .WithMany("Taskstasks")
                        .HasForeignKey("email_id");

                    b.Navigation("account");

                    b.Navigation("contact");

                    b.Navigation("email");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AccountsAccount", b =>
                {
                    b.Navigation("Accountsaccount_contacts");

                    b.Navigation("Accountsaccount_documents");

                    b.Navigation("Callscalls");

                    b.Navigation("Cases_cases");

                    b.Navigation("Contactscontacts");

                    b.Navigation("Emailemails");

                    b.Navigation("Meetingsmeetings");

                    b.Navigation("Opportunitiesopportunities");

                    b.Navigation("Taskstasks");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressCity", b =>
                {
                    b.Navigation("Contactscontacts");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressCountry", b =>
                {
                    b.Navigation("Addressaddress_states");

                    b.Navigation("Contactscontacts");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.AddressAddressState", b =>
                {
                    b.Navigation("Addressaddress_cities");

                    b.Navigation("Contactscontacts");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CallsCall", b =>
                {
                    b.Navigation("Callscall_contacts");

                    b.Navigation("Callscall_leads");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CampaignCampaign", b =>
                {
                    b.Navigation("Accountsaccounts");

                    b.Navigation("Contactscontacts");

                    b.Navigation("Leadsleads");

                    b.Navigation("Opportunitiesopportunities");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.CasesCase", b =>
                {
                    b.Navigation("Casescase_contacts");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.ContactsContact", b =>
                {
                    b.Navigation("Accountsaccount_contacts");

                    b.Navigation("Callscall_contacts");

                    b.Navigation("Cases_cases");

                    b.Navigation("Casescase_contacts");

                    b.Navigation("Contactscontact_documents");

                    b.Navigation("Contactscontact_meetings");

                    b.Navigation("Contactscontact_opportunities");

                    b.Navigation("Employeesemployees");

                    b.Navigation("Opportunitiesopportunities");

                    b.Navigation("Taskstasks");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.DocumentsDocument", b =>
                {
                    b.Navigation("Accountsaccount_documents");

                    b.Navigation("Contactscontact_documents");

                    b.Navigation("Documentsdocument_leads");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.EmailEmail", b =>
                {
                    b.Navigation("Taskstasks");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.EmployeesEmployee", b =>
                {
                    b.Navigation("Accountsaccounts");

                    b.Navigation("Documentsdocuments");

                    b.Navigation("Opportunitiesopportunities");

                    b.Navigation("Taskstasks");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.LeadsLead", b =>
                {
                    b.Navigation("Callscall_leads");

                    b.Navigation("Cases_cases");

                    b.Navigation("Documentsdocument_leads");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.MeetingsMeeting", b =>
                {
                    b.Navigation("Contactscontact_meetings");
                });

            modelBuilder.Entity("EspoNew.Server.Models.EspoDbNew.OpportunitiesOpportunity", b =>
                {
                    b.Navigation("Contactscontact_opportunities");
                });
#pragma warning restore 612, 618
        }
    }
}
